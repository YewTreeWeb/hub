// mixins, loops and functions

//border-radius
@mixin rounded($radius){
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -o-border-radius: $radius;
  -ms-border-radius: $radius;
}

//box-shadow
@mixin drop-shadow($x: 0px, $y: 0px, $blur: 0px, $alpha: 0.5){
    box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
    -webkit-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
    -moz-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
    -o-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
    -ms-box-shadow: $x $y $blur rgba(0, 0, 0, $alpha);
}

//css placeholder
@mixin placeholder($color: $brand-primary){
    ::-webkit-input-placeholder { color: $color;}
    :-moz-placeholder {color: $color;}
    ::-moz-placeholder {color: $color;}
    :-ms-input-placeholder {color: $color;}
    :-o-input-placeholder {color: $color;}
}

//css transition
@mixin transition($prop: all, $time: 1s, $ease: linear) {
    transition: $prop $time $ease;
    -webkit-transition: $prop $time $ease;
    -moz-transition: $prop $time $ease;
    -o-transition: $prop $time $ease;
    -ms-transition: $prop $time $ease;
}

//css transition-delay
@mixin transition-delay($time){
    transition-delay: $time;
    -webkit-transition-delay: $time;
    -moz-transition-delay: $time;
    -o-transition-delay: $time;
    -ms-transition-delay: $time;
}

//css transform
@mixin transform($string){
    -webkit-transform: $string;
    -moz-transform: 	 $string;
    -ms-transform: 		 $string;
    -o-transform: 		 $string;
}

//css scale
@mixin scale($factor) {
    -webkit-transform: scale($factor);
    -moz-transform: 	 scale($factor);
    -ms-transform: 		 scale($factor);
    -o-transform: 		 scale($factor);
}

//css rotate
@mixin rotate( $deg ){
  transform: rotate(#{$deg}deg);
  -webkit-transform: rotate(#{$deg}deg);
  -moz-transform: rotate(#{$deg}deg);
  -o-transform: rotate(#{$deg}deg);
  -ms-transform: rotate(#{$deg}deg);
}

//css transform-origin
@mixin transform-origin($x, $y) {
    -webkit-transform-origin: $x $y;
    -moz-transform-origin:    $x $y;
    -ms-transform-origin:     $x $y;
    -o-transform-origin:      $x $y;
}

//convert px to em
@function em($pixels, $context: $font-base) {
  @return #{$pixels/$context}em;
}

//css positioning
@mixin centerPosition($horizontal: true, $vertical: true) {
  position: absolute;
  margin: 0 auto;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
  } @else if ($horizontal) {
    left: 0;
    right: 0;
  } @else if ($vertical) {
    top: 50%;
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
  }
}

//flex
@mixin flex($display, $justify, $align, $order){
  display: $display;
  -webkit-display: $display;
  -moz-display: $display;
  -o-display: $display;
  -ms-display: $display;

  justify-content: $justify;
  align-items: $align;
  flex-flow: $order;
}

//css support
@mixin support( $type, $value ){
  @if( $type == 'display' && $value == 'flex' ){

    @supports #{($type: $value)}{
      display: $value;
      flex-flow: row wrap;
      align-items: center;
    }

  }
  @else{

    @supports #{($type: $value)}{
      @content;
    }

  }
}
